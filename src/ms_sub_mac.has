*
*	Ｍｓｘ Ｓｉｍｕｌａｔｅｒ
*		[[ ｓｕｂ Ｒｏｕｔｉｎｅ ]]
*				1993.10.		by Kuni.
*

	.include	iocscall.mac
	.include	doscall.mac
	.include	src/himemcall.mac

	.xref	ms_memmap_init

	.xref	slot_3_ex

	.xref	VDP_R_01		* VDP コントロールレジスタ 1

	.xref	KEY_INT

	.xdef	KEY_vector
	.xdef	NMI_vector

	.xdef	_new_malloc
	.xdef	_new_free
	.xdef	_new_read

	.xdef	ms_iocs_ledctrl

	.xdef	ms_vdp_int
	.xdef	ms_cpu_int
	.xdef	int_block_count
	.xdef	host_line

headerlength	equ	8

V_MFP_GPIP_4	equ	$000118		* V-DISP割り込みのベクタアドレス
V_MFP_GPIP_6	equ	$000138		* 特定ラスタ(CRTC R#9)での割り込みのベクタアドレス
V_MFP_GPIP_7	equ	$00013C		* H-SYNC割り込み(全ラスタ割り込み)
V_MFP_MPSC_EMP	equ	$000130		* キー入力ベクタアドレス
IERA		equ	$e88007		* 割り込み許可レジスタA。Bit7がGPIP7(HSYNC)
IERB		equ	$e88009
ISRA		equ	$e8800F
ISRB		equ	$e88011
IMRA		equ	$e88013		* 割り込みマスクレジスタA。Bit7がGPIP7(HSYNC)
IMRB		equ	$e88015
VR		equ	$e88017		* ベクタレジスタ

GPAGE0		equ	$c00000		* ＧＲＡＭの先頭アドレス

pla0		equ	$e00000

* ------ メッセージ表示マクロ ------------------
print:		macro	msg
		pea	msg
		DOS	__PRINT
		add.l	#4,sp
		endm

	.data
	.even

; CPUコアのINT端子(割り込み受付)と、VDPのINT端子(割り込み要求)を接続するための変数
; bit0: VSYNC割り込み要求
; bit1: HSYNC割り込み要求
ms_cpu_int:
ms_vdp_int:
	.dc.b	0

	.even

	.text


*
*
*	メモリ確保ルーチン
*
*
_new_malloc:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	move.l	8(a6),-(sp)
	DOS	__MALLOC
	lea.l	4(sp),sp

	btst.l	#31,d0
	bne	@f
	; 確保できた場合は、確保したメモリをクリアする
	movea.l	d0,a1
	move.l	8(a6),d1
	lsr.l	#2,d1
1:	move.l	#0,(a1)+
	dbra	d1,1b
	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

	; 確保できなかったらNULLを返す
@@:	clr.l	d0
	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts


; 以下は使ってない

	clr.l	-(sp)			; himem.sys の常駐確認
	DOS	__SUPER
	addq.l	#4,sp

	move.l	d0,d7
	move.l	#himem_iocs,d1
	lsl.l	#2,d1
	add.l	#$400,d1
	move.l	d1,a0
	move.l	(a0),a0
	lea	-6(a0),a0
	move.l	(a0)+,d0
	cmp.l	#'HIME',d0
	bne	not_himem

	move.w	(a0)+,d0
	cmp.w	#'M'*256,d0
	bne	not_himem

	move.l	d7,-(sp)
	DOS	__SUPER
	addq.l	#4,sp

	link	a6,#0
	move.l	8(a6),d2

	HMEM	__h_alloc

	tst.l	d0
	bmi	@f

	move.l	a1,d0

	unlk	a6
	rts		

@@:
	unlk	a6
***	bra	not_himem
not_himem:
	link	a6,#0

	move.l	8(a6),-(sp)
	DOS	__MALLOC
	lea.l	4(sp),sp

	unlk	a6
	rts


*
*	メモリ解放ルーチン
*
_new_free:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	move.l	8(a6),d0
	beq	@f		; NULLチェック
	move.l	d0,-(sp)
	DOS	__MFREE
	lea.l	4(sp),sp

@@:	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

*
*	ファイル読み込みルーチン
*
*
*	int new_read( short filedes, char *buff, unsigned int n);
*
_new_read:
	link	a6,#0

	cmpi.l	#$01000000,12(a6)

	bpl	_new_read_200

	move.l	14(a6),-(sp)
	move.l	10(a6),-(sp)
	move.w	 8(a6),-(sp)

	DOS	__READ

	lea.l	10(sp),sp

	unlk	a6

	rts

_new_read_200:
	move.l	14(a6),-(sp)
	DOS	__MALLOC
	lea.l	4(sp),sp

	tst.l	d0
	bmi	_new_read_210

	move.l	14(a6),-(sp)
	movea.l	d0,a2
	move.l	d0,-(sp)
	move.w	 8(a6),-(sp)
	DOS	__READ
	lea.l	10(sp),sp

	move.l	14(a6),d0
	movea.l	10(a6),a1
	movea.l	a2,a0
@@:	move.b	(a2)+,(a1)+
	subq.l	#1,d0
	bne	@b

	move.l	a0,-(sp)
	DOS	__MFREE
	lea.l	4(sp),sp	

	unlk	a6

	rts

_new_read_210:
	print	msg00

	DOS	__EXIT


;
;	LED ON/OFF
;
;	bit 0:	かな
;	bit 1:	ローマ字
;	bit 2:	コード入力
;	bit 3:	CAPS
;	bit 4:	INS
;	bit 5:	ひらがな
;	bit 6:	全角	
;
;	on = 1, off = 0
;
ms_iocs_ledctrl:
	move.l	4(sp),d1	* led key code
	move.l	8(sp),d2
	move.b	#$06,d0
	trap	#15
	rts

	.data

int_block_count:
	.dc.l	2048
host_line:
	.dc.w	100
original:
	.dc.l	0

msg00:	.dc.b	'メモリが足りません。',0,0

	.even

*	割り込みベクタ保存領域
NMI_vector:
	.dc.l	0
KEY_vector:
	.dc.l	0

	.end

