*
*	Ｍｓｘ Ｓｉｍｕｌａｔｅｒ
*
*		[[[ Ｉ／Ｏ Ｓｉｍｕｌａｔｅｒ ]]]		
*
*				1995.9.15		by Kuni.
*

	.include	iocscall.mac
*	.include	doscall.mac

	.xdef	r_port_90
	.xdef	r_port_A9
	.xdef	r_port_AA
	.xdef	r_port_AB
	.xdef	r_port_FC
	.xdef	r_port_FD
	.xdef	r_port_FE
	.xdef	r_port_FF

	.xdef	w_port_90
	.xdef	w_port_91
	.xdef	w_port_AA
	.xdef	w_port_AB

	.xdef	p_FC
	.xdef	p_FD
	.xdef	p_FE
	.xdef	p_FF

	.xref	slot_reg

	.xref	cpu_emu_yield
	.xref	KEY_vector
	.xref	debug_log_level

	.xdef	_KEYSNS_tbl_ptr

	.xdef	_ms_peripherals_led_caps
	.xdef	_ms_peripherals_led_kana

	.68000

USART_data	equ	$e8802f		* USART データポート

	.text
	.even

********************************************************************
*
*	ＩＮＰＵＴ
*		d0.b に読み込んだ値を入れて rts
*
********************************************************************
r_port_90:				* プリンタ ＢＵＳＹ検出
	move.b	$E9C001,d0		* Inside p375
	andi.b	#%00100000,d0
	lsr.b	#4,d0
	rts

r_port_A9:
	move.b	p_AA,d0
	andi.w	#$000f,d0
	lea	_KEYSNS_tbl,a0
	move.b	(a0,d0.w),d0
	rts

	.data

_KEYSNS_tbl:
	.dc.b	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
_KEYSNS_tbl_ptr:
	.dc.l	_KEYSNS_tbl

	.text

r_port_AA:
	move.b	p_AA,d0
	rts

r_port_AB:				* PPI Control Register
	move.b	p_AB,d0
	rts

r_port_FC:
	move.b	p_FC,d0
	rts
r_port_FD:
	move.b	p_FD,d0
	rts
r_port_FE:
	move.b	p_FE,d0
	rts
r_port_FF:
	move.b	p_FF,d0
	rts


****************************************************************************
*
*	ＯＵＴＰＵＴ
*		d1.b に書き込む値が入ってくる
*
*	d0〜d3 を使ってよい
*
****************************************************************************
w_port_90:				* プリンタポート
	rts
	eori.b	#1,d1
	move.b	d1,$E8C003		* プリンタ STROBE	(Inside p373)
	rts
w_port_91:				* プリンタポート
	rts
	move.b	d1,$E8C001		* プリンタ DATA		(Inside p373）	
	rts

w_port_AA:
	move.b	d1,p_AA

	move.b	d1,d0
	andi.w	#%01000000,d0		* ビット６は CAPS ランプの制御
	lsr.w	#6,d0			* フラグを保存して、VSYNC期間に反映させる
	eori.w	#%00000001,d0		* ビット反転
	move.b	d0,_ms_peripherals_led_caps
	rts

*
*	port AB 解析結果
*
*	　負の値を書き込むとそれが port AB の値になる。つまり port AB を読むとその
*	値が返ってくる。（この値がに使われるのかは？＜−どうも各ポートのＩ／Ｏの方
*	向の設定に使うらしい。MS.Xでは関係ない）
*
*	　正の値を書き込んだ時、
*		偶数の時：port AA の指定されたビットを０にする。ビットの指定はビット
*			  1,2,3 の組み合わせによる。
*		奇数の時：port AA の指定されたビットを１にする。ビットの指定はビット
*			  1,2,3 の組み合わせによる。
*
w_port_AB:
	move.b	d1,d0
	bpl	@f
	move.b	d0,p_AB
	rts
@@:	move.b	p_AA,d1
	andi.b	#%00001111,d0
	lsr.b	#1,d0
	bcc	@f
	bset.l	d0,d1			* 奇数の時
	bra	w_port_AA
@@:	bclr.l	d0,d1			* 偶数の時
	bra	w_port_AA


	.data

*	Ｉ／Ｏポートの値保存場所
p_AA:	.dc.b	0
p_AB:	.dc.b	0			* PPI Control Register

p_FC:	.dc.b	3			* マッパースロット選択レジスター
p_FD:	.dc.b	2			* 初期値に意味はない。何となく。
p_FE:	.dc.b	1
p_FF:	.dc.b	0


;	状態保持用
_ms_peripherals_led_caps:
	.dc.b	0
_ms_peripherals_led_kana:
	.dc.b	0

	.end