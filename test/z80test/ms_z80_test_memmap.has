	.cpu 68030

	.include	iocscall.mac
	.include	doscall.mac

	.xdef	ms_memmap_init
	.xdef	ms_memmap_deinit

	.xdef	ms_read_mem_8
	.xdef	ms_read_mem_16
	.xdef	ms_write_mem_8
	.xdef	ms_write_mem_16

	.xdef	ms_mainmem_ptr

	.xdef	ms_cpu_mem_ptr_array

	; 暫定
	.xdef	HEX
	.xdef	native_jpt_add
	.xdef	ms_cpu_int
	.xdef	framerate_control
	.xdef	ms_vsync_interrupt_tick

	.text

;
;	メモリマッピングの初期化
;
ms_memmap_init:
	rts

ms_memmap_deinit:
	; TODO ほんとはここで、セットされたROMやメモリの解放処理を入れたい
	rts

	.data

ms_mainmem_ptr:
	.dc.l	ms_mainmem
	
ms_mainmem:
ms_mainmem_page0:
	.ds.b	8192
ms_mainmem_page1:
	.ds.b	8192
ms_mainmem_page2:
	.ds.b	8192
ms_mainmem_page3:
	.ds.b	8192
ms_mainmem_page4:
	.ds.b	8192
ms_mainmem_page5:
	.ds.b	8192
ms_mainmem_page6:
	.ds.b	8192
ms_mainmem_page7:
	.ds.b	8192

ms_cpu_mem_ptr_array:
	.dc.l	ms_mainmem_page0
	.dc.l	ms_mainmem_page1
	.dc.l	ms_mainmem_page2
	.dc.l	ms_mainmem_page3
	.dc.l	ms_mainmem_page4
	.dc.l	ms_mainmem_page5
	.dc.l	ms_mainmem_page6
	.dc.l	ms_mainmem_page7

; 暫定
ms_cpu_int:
	.dc.b	0
native_jpt_add:		* ネイティブルーチンジャンプテーブルのあるアドレス
	.dc.l	0	
HEX:	.dc.b	'0123456789ABCDEF'
framerate_control:
	.dc.l	0
ms_vsync_interrupt_tick:
	.dc.w	0


	.text


*******************************************************************
*
*	メモリから 8ビットのデータを読み込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d0.b にメモリから読み込んだ値が入る
*
*******************************************************************
ms_read_mem_8:
	* D2が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$5a5a5a5a,d2

	move.l	a0,-(sp)
	lea	ms_mainmem,a0
	and.l	#$ffff,d0
	move.b	(a0,d0.l),d0
	move.l	(sp)+,a0
	* D1が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$a5a5a5a5,d1
	rts

*******************************************************************
*
*	メモリへ 8ビットのデータを書き込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*	d1.b ・・・ 書き込む値
*（動作）
*	d0.w のアドレスに d1の値を書き込む。  
*
*	d2 破壊可能性あり
*
*******************************************************************
ms_write_mem_8:
	* D2が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$5a5a5a5a,d2

	move.l	a0,-(sp)
	lea	ms_mainmem,a0
	and.l	#$ffff,d0
	move.b	d1,(a0,d0.l)
	move.l	(sp)+,a0
	* D1が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$a5a5a5a5,d1
	rts

*******************************************************************
*
*	メモリから 16ビットのデータを読み込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d0.w にメモリから読み込んだ値が入る
*
*******************************************************************
ms_read_mem_16:
	* D2が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$5a5a5a5a,d2

	move.l	a0,-(sp)
	lea	ms_mainmem,a0
	and.l	#$ffff,d0
	cmpi.l	#$ffff,d0
	beq	@f
	move.w	(a0,d0.l),d0
	ror.w	#8,d0		; エンディアンを逆にする
	move.l	(sp)+,a0
	* D1が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$a5a5a5a5,d1
	rts
@@:	move.b	(a0,d0.l),d0	; 下位バイトを読み込む
	lsl.w	#8,d0
	move.b	(a0),d0		; 0xffff の場合は、上位バイトは 0x0000にある
	ror.w	#8,d0		; エンディアンを逆にする
	move.l	(sp)+,a0
	* D1が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$a5a5a5a5,d1
	rts

*******************************************************************
*
*	メモリへ 16ビットのデータを書き込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d1.w の内容をメモリに書き込む
*
*	d2 破壊可能性あり
*
*******************************************************************
ms_write_mem_16:
	* D2が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$5a5a5a5a,d2

	move.l	a0,-(sp)
	lea	ms_mainmem,a0
	and.l	#$ffff,d0
	cmpi.l	#$ffff,d0
	beq	@f
	ror.w	#8,d1		; エンディアンを逆にする
	move.w	d1,(a0,d0.l)
	move.l	(sp)+,a0
	* D1が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$a5a5a5a5,d1
	rts
@@:	move.b	d1,(a0,d0.l)	; 0xffff に下位バイトを書き込み
	lsr.w	#8,d1
	move.b	d1,(a0)		; 0x0000 に上位バイトを書き込み
	move.l	(sp)+,a0
	* D1が破壊されてもOKなことを確認するためにわざと破壊する
	move.l	#$a5a5a5a5,d1
	rts

	.end